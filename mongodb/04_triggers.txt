
// validate_email

exports = async function(changeEvent) {
  const docId = changeEvent.documentKey._id;
  const serviceName = "NoSQL";
  const database = "bookstore";
  const collection = context.services.get(serviceName).db(database).collection(changeEvent.ns.coll);
  
  try {
    const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
    
    if (changeEvent.operationType === "insert") {
      const newCustomer = changeEvent.fullDocument;
      if (newCustomer.email && !emailRegex.test(newCustomer.email)) {
        // Delete invalid insert
        await collection.deleteOne({_id: docId});
        console.log(`Deleted customer ${docId} due to invalid email: ${newCustomer.email}`);
      }
    }
    else if (changeEvent.operationType === "update" || changeEvent.operationType === "replace") {
      const currentDocument = changeEvent.fullDocument;
      if (currentDocument?.email && !emailRegex.test(currentDocument.email)) {
        // Email is invalid, revert to previous state
        if (changeEvent.fullDocumentBeforeChange) {
          await collection.replaceOne(
            {_id: docId}, 
            changeEvent.fullDocumentBeforeChange
          );
          console.log(`Reverted customer ${docId} due to invalid email: ${currentDocument.email}`);
        } else {
          // Delete the document if we cant revert
          await collection.deleteOne({_id: docId});
          console.log(`Deleted customer ${docId} due to invalid email and no previous state available`);
        }
      }
    }
  } catch(err) {
    console.log("Error in trigger:", err.message);
  }
};

// insert_order_history


exports = async function(changeEvent) {
  const docId = changeEvent.documentKey._id;
  const serviceName = "NoSQL";
  const database = "bookstore";
  const collection = context.services.get(serviceName).db(database).collection(changeEvent.ns.coll);
  
  try {
    if (changeEvent.operationType === "insert") {
      const currentDate = new Date().toISOString().split('T')[0];
      const historyElement = {
        _id: new BSON.ObjectId(),
        status:{
        _id:1,
        date: currentDate,
        status: "Order Received" 
        }
      };
      
      // First, ensure the history field exists
      await collection.updateOne(
        { _id: docId, history: { $exists: false } },
        { $set: { history: [] } }
      );
      
      // Then push the new element
      await collection.updateOne(
        { _id: docId },
        { $push: { history: historyElement } }
      );
    }
  } catch (err) {
    console.log("Error performing MongoDB write:", err.message);
  }
};


// prevent_book_deletion

exports = async function(changeEvent) {
  const docId = changeEvent.documentKey._id;
  const serviceName = "NoSQL";
  const database = "bookstore";
  const collectionName = changeEvent.ns.coll;
  const collection = context.services.get(serviceName).db(database).collection(collectionName);

  // This is the collection containing lines with references to books
  const ordersCollection = context.services.get(serviceName).db(database).collection("orders");

  try {
    if (changeEvent.operationType === "delete") {
      const pipeline = [
        { $unwind: "$lines" },
        { $match: { "lines.book_id": docId } }
      ];

      const result = await ordersCollection.aggregate(pipeline).toArray();

      if (result.length > 0) {
        await collection.insertOne(changeEvent.fullDocumentBeforeChange)
        console.log(`Deletion prevented: Book ${docId} is referenced in 'orders'.`);
        return;
      }
    }
  } catch (err) {
    console.log("Error performing MongoDB operation:", err.message);
  }
};
